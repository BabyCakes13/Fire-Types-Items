;Template for item object. Contains one slot for the type and one slot for the name.
(deftemplate item
	(slot type)
	(slot name)
)

;Facts representing item objects based on the item template. 
(deffacts items
	(retry)

	(item (name Cloth) (type A))
	(item (name Paper) (type A))
	(item (name Wood) (type A))

	(item (name Gas) (type B))
	(item (name Greases) (type B))
	(item (name Oil) (type B))

	(item (name Television) (type C))
	(item (name Fridge) (type C))
	(item (name Blender) (type C))

	(item (name Magnesium) (type D))
	(item (name Potassium) (type D))
	(item (name Sodium) (type D))	
)

;Template for fire object. Contains one slot for the fire description and one slot for the file type.
(deftemplate fire
	(slot type)
	(slot description)
)

;Facts representing the four types of fire and their descriptions, based on the fire template.
(deffacts fires

	(fire (type A) (description "Class of type A fires should be extinguished with heat-absorbing or combustion-retarding extinguishers such as water or water based liquids and dry chemicals. ")
	)

	(fire (type B) (description "Class of type B fires should be extinguished by excluding air, inhibiting the release of combustible vapors, or interrupting the combustion chain reaction. Extinguishers include dry chemicals, carbon dioxide, foam, and bromotrifluoromethane. ")
	)

	(fire (type C) (description "Class of type C fires should be extinguished with a nonconducting agent to prevent short circuits. If possible the power should be cut. Extinguishers include dry chemicals, carbon dioxide, and bromotrifluoromethane. ")
	)

	(fire (type D) (description "Class of type D fires should be extinguished with smothering and heat-absorbing chemicals that do not react with the burning metals. Such chemicals include trimethoxyboroxine and screened graphited coke. ")
	)

)

;Rule for input reading.
(defrule read_input
	(not (goal ?g))
	?r <- (retry)

	=>

	(printout t "Type in the material you want to check: " crlf)
	(bind ?g (read))
	(assert (goal ?g))
	(retract ?r)
)

;Rule for input validation.
(defrule valid
	?a <- (goal ?g)
	(not (item (name ?g)))

	=>

	(printout t "The answer is not valid." crlf)
	(retract ?a)
	(assert (retry))
)

;Rule which, given a read goal, finds the description for the type of the fire generated by the item. It prints the output on the screen.	
(defrule main
	(goal ?g)
	(fire (type ?t)(description ?d))
	(item (name ?n&?g)
		(type ?T&?t)
	)

	=>

	(printout t "Item: " ?n crlf "Fire type: " ?t crlf "Type description: " ?d crlf)
)

